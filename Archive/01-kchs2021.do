set gr off 
set more off 
clear all 

**# Start with household microdataset 
use "${gsdDataRaw}\kchs 2021\households_microdata.dta", clear 

**# Import coordinates
merge 1:1 interview__id interview__key using "${gsdDataRaw}\kchs 2021\raw_hh_valid.dta", keep(3) nogen keepusing(longitude latitude altitude)

**# Import consumption aggregate and poverty indicators 
merge 1:1 interview__id interview__key using "${gsdDataRaw}\kchs 2021\consagg_microdata.dta", keep(3) nogen


**# Compute EA centroids

foreach v of varlist latitude longitude {
	bys clid: egen clid_`v'_med=median(`v')
	bys clid: egen clid_`v'_mad=mad(`v')
	gen ub_`v'=clid_`v'_med+15*clid_`v'_mad
	gen lb_`v'=clid_`v'_med-15*clid_`v'_mad
	gen out_`v'=!inrange(`v',lb_`v',ub_`v')
}
replace latitude=clid_latitude_med if out_latitude==1 | out_longitude==1 
replace longitude=clid_longitude_med if out_latitude==1 | out_longitude==1 
mdesc latitude longitude
bys clid: egen n_hh=count(latitude)
fre out_*
qui export delimited interview__id clid latitude longitude if n_hh>=4 & !mi(n_hh) using "${gsdTemp}\kchs21_hh_gps.csv", replace
preserve 
qui duplicates drop clid, force 
qui export delimited clid clid_*_med using "${gsdTemp}\kchs21_ea_centroids_gps.csv", replace
restore 
ex
**# Household member level variables
use "${gsdDataRaw}\kchs 2021\KCHS 2021 individuals_microdata.dta", clear
*Compute dependency ratio 
bys interview__key: egen n=anycount(b05_years),v(2,3,4)
gen dep_ratio=/hhsize
keep if b03==1 //now, retain only household heads

**# Import info on NDVI Shock NDVI time series 

**# Import soil quality info 

**# Import info on rain shock Import Chirps time series

**# Import info on temperature shock (compute from Chirps time series)

**# Construct variables 
*County type
// recode county () () (),gen(county_type)
// lab def county_type 1 "Non-arid" 2 "Semi-arid" 3 "Arid" 
// lab val county_type county_type
// gen asal=inlist(county_type,2,3)
// lab def asal 1 "ASAL" 2"Non-ASAL"
// lab val asal asal
//
// *Household characteristics 
// 
recode e4 () () ,gen() //
recode e5 () () ,gen()
recode e6 () () ,gen()
recode e7 () () ,gen()
recode e8 () () ,gen()
recode e9 () () ,gen()
recode e10 () () ,gen()
recode e11 () () ,gen()
recode e12 () () ,gen()

**# Food security index (based on PCA)
*Obtain raw score w/PCA. 
pca f_b0* [aw=weight_hh], components(1)
predict fsecurity_index_pca, score
*Create the standarized and positive asset index
egen max=max( fsecurity_index_pca)
egen min=min( fsecurity_index_pca)
gen temp=( fsecurity_index_pca -min)/(max-min)
replace fsecurity_index_pca =temp
label var fsecurity_index_pca "Asset index (PCA)"
notes fsecurity_index_pca: 1 is maximum food insecurity, 0 is minimum food insecurity
drop max min temp

**# Estimate models
svyset clid [pw=weight_hh]
global climatic_shocks //rainshock evishock temperatureshock
global hh_chars
global hhh_chars
global othercovariates hhsize i.a11_1 e1 e2 e3 fsecurity_index_pca
reg abs_poor $climatic_shocks $hh_chars $hh_chars $othercovariates

loocv reg abs_poor $climatic_shocks $hh_chars $hh_chars $othercovariates [weight=weight_hh], eweight(weight_hh)

crossfold reg abs_poor $climatic_shocks $hh_chars $hh_chars $othercovariates [weight=weight_hh], eweight(weight_hh) r2


